name: "Elyseum Coverage Reporter"
description: "Installs elyseum-cli, runs it, and comments on a PR with the results"
inputs:
  github_token:
    description: 'GitHub API Access Token.'
    default: ${{ github.token }}
    required: false
  github_token_actor:
    description: 'The name of the GitHub app that owns the GitHub API Access Token (see github_token). Used to identify pull request comments created by this action during earlier runs. Has to be set when `github_token` is set to a GitHub app installation token (other than GitHub actions). Otherwise, existing comments will not be updated, but new comments created. Note: this does not change the bot name of the pull request comments. Defaults to "github-actions".'
    default: 'github-actions'
    required: false
  command:
    description: "Command to run elyseum-cli with (diff-coverage, coverage, etc.)"
    default: "diff-coverage"
  comment-name:
    description: "Name of the comment to update or create"
    default: "Elyseum Coverage Reporter"
  workdir:
    description: "Working directory to run elyseum-cli in"
    default: "."
  result-file-path:
    description: "Path to the result file"
    default: "coverage/github.pr.coverage.md"
  annotation-file-path:
    description: "Path to the result file"
    default: "coverage/github.pr.annotations.json"
  quality-gate:
    description: "Quality gate to check against"
    default: "80"
  quality-gate-fail:
    description: "Quality gate to fail against"
    default: "20"
  use-dev-elyseum-cli:
    description: "Use the development branch elyseum-cli"
    default: ""
runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install elyseum-cli
      if: ${{ inputs.use-dev-elyseum-cli == '' }}
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: npm install -g @dragonshorn-studios/elyseum-cli
    
    - name: Install elyseum-cli from Dragonshorn-Studios/elyseum-cli repository
      if: ${{ inputs.use-dev-elyseum-cli != '' }}
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        git clone https://github.com/Dragonshorn-Studios/elyseum-cli.git /tmp/elyseum-cli
        cd /tmp/elyseum-cli
        git checkout ${{ inputs.use-dev-elyseum-cli }}
        npm install
        npm link .

    - name: Run elyseum-cli
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: elyseum-cli ${{ inputs.command }} --reporter.coverage.github-pr-comment.comment-name "${{ inputs.comment-name }}" --reporter.coverage.github-pr-comment.comment-file-path "${{ inputs.result-file-path }}" --reporter.coverage=github-pr-comment --reporter.coverage.github-pr-comment.comment-name "${{ inputs.comment-name }}" --reporter.coverage.github-pr-comment.create-annotations --reporter.coverage.github-pr-comment.quality-gate "${{ inputs.quality-gate }}" --reporter.coverage.github-pr-comment.quality-gate-fail ${{ inputs.quality-gate-fail }}
      env:
        GITHUB_BASE_REF: ${{ github.base_ref }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_NUMBER: ${{ github.event.number }}

    - name: Find Comment
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: ${{ inputs.comment-name }}

    - name: Create comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.number }}
        body-path: ${{ inputs.workdir }}/${{ inputs.result-file-path }}
        edit-mode: replace

    # parse annotation json using jq from annotations file
    # 
      # owner,
      # repo,
      # name: "Quality Gate",
      # head_sha: diffCoverage.headSha,
      # status: "completed",
      # conclusion: qualityGateFailed
      #   ? "failure"
      #   : qualityGateWarning
      #   ? "neutral"
      #   : "success",
      # output: {
      #   title: "Coverage Quality Gate",
      #   summary: `Coverage Quality Gate ${
      #     qualityGateFailed
      #       ? "Failed"
      #       : qualityGateWarning
      #       ? "Warning"
      #       : "Passed"
      #   }`,
      #   text: markdown,
      #   annotations: annotations,
      # },
    - name: Parse annotations
      id: parse-annotations
      shell: bash
      run: |
        echo "annotations=$(jq -r .annotations < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "name=$(jq -r .name < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "title=$(jq -r '.title' < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "summary=$(jq -r '.summary' < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "text=$(jq -r '.text' < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "status=$(jq -r .status < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT
        echo "conclusion=$(jq -r .conclusion < ${{ inputs.workdir }}/${{ inputs.annotation-file-path }})" >> $GITHUB_OUTPUT

    - name: ðŸ“¢ Update Check Run
      uses: LouisBrunner/checks-action@v2.0.0
      if: always()
      with:
        token: ${{ inputs.github_token }}
        conclusion: ${{ steps.parse-annotations.outputs.conclusion }}
        status: ${{ steps.parse-annotations.outputs.status }}
        name: "${{ steps.parse-annotations.outputs.name }}"
        output: |
          {
            "title": "${{ steps.parse-annotations.outputs.title }}",
            "summary": "${{ steps.parse-annotations.outputs.summary }}",
            "text_description": "${{ steps.parse-annotations.outputs.text }}",
          }
        annotations: |
          ${{ steps.read_error_log.outputs.error_log }}

